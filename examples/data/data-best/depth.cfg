// Example configuration for a k4a/azure kinect.

// Example configuration for a k4a/azure kinect.
//
// We use the official libk4a API to access the sensor streams.

sink-k4a = {
  // [Mandatory] Specify the device/sink type.
  sink_type = "k4a";

  // [Optional] If omitted or empty, the first available azure kinect will be opened.
  serial_number = "";

  // [Optional] Specify a custom label
  label = "Kinect #1";


  // [Optional] Where to load/store the intrinsic calibration from/to.
  calibration_file = "calib-k4a.xml";

  // [Optional] If true, the sensor calibration will be stored to "calibration_file".
  write_calibration = true; // If set, the calibration_file will be overwritten

  // [Optional] Set to true to rectify streams.
  rectify = true;


  // [Optional] Do you want to work with RGB or BGR?
  color_as_bgr = false;

  // [Optional] Log verbosely or not
  verbose = true;

  // [Optional] If true, depth stream will be aligned to the color stream's view (if enabled).
  align_depth_to_color = true;

  // [Optional] If true, the sensor will only send "complete" framesets, i.e. both color and depth are synchronized.
  synchronized_images_only = true;

  // [Optional] How long should we wait (at most) for a new frameset to arrive.
  capture_timeout_ms = 500;

  // [Optional] k4a_color_resolution_t (specify the enum's name).
  color_resolution = "K4A_COLOR_RESOLUTION_720P";

  // [Optional] k4a_depth_mode_t (specify the enum's name).
  depth_mode = "K4A_DEPTH_MODE_NFOV_UNBINNED";

  // [Optional] In addition to color and depth, you can also retrieve the infrared stream.
  enable_infrared_stream = false;

  // [Optional] k4a_fps_t (specify the enum's name).
  fps = "K4A_FRAMES_PER_SECOND_15";

  // [Optional] Turn indicator LED on/off.
  disable_streaming_indicator = false;

  // [Optional] Desired delay in microseconds between capturing color and depth image.
  depth_delay_off_color_usec = 0;

  // [Optional] Return depth in meters (true) or millimeters (false).
  depth_in_meters = false;

  // [Optional] The external synchronization mode - use this to configure master/subordinate connections. k4a_wired_sync_mode_t, use enum's name as string.
  wired_sync_mode = "K4A_WIRED_SYNC_MODE_STANDALONE";

  // [Optional] External synchronization timing (if this sensor is a subordinate).
  subordinate_delay_off_master_usec = 0;

  // [Optional] List of color sensor settings which should be set to "auto" mode.
  color_control_auto = [
    "K4A_COLOR_CONTROL_EXPOSURE_TIME_ABSOLUTE",
    "K4A_COLOR_CONTROL_WHITEBALANCE"
  ];

  // [Optional] List of (color sensor setting, value) pairs which should be set.
  color_control_manual = (
//    ("K4A_COLOR_CONTROL_BACKLIGHT_COMPENSATION", 1),
    ("K4A_COLOR_CONTROL_POWERLINE_FREQUENCY", 1)
//    ("K4A_COLOR_CONTROL_SATURATION", 32),
//    ("K4A_COLOR_CONTROL_SHARPNESS", 2)
  );
};

skip-sink-rs2 = {
  // [Mandatory] Specify the device/sink type.
  sink_type = "realsense2";

  // [Optional] Specify a custom label
  label = "rs2 #1";

  // [Optional] If omitted or empty, the first available RealSense will be opened.
  serial_number = "";

  // [Optional] Select which streams to receive:
  // * Single-stream only: color, depth, ir-left, ir-right
  // * Multiple streams: rgbd (or color-depth), rgbdir (rgbd + left ir), rgbdir2 (rgbd + both ir)
  stream_type = "rgbd"; 

  // [Optional] Do you want to work with RGB or BGR?
  color_as_bgr = false;

  // [Optional] Return depth in meters (true) or millimeters (false).
  depth_in_meters = false;

  // [Optional] If true, depth stream will be aligned to the color stream's view (if enabled).
  align_depth_to_color = true;

  // [Optional] Set the frame rate of the color sensor as integer (check supported values, e.g. 0 [any], 6, 15, 30).
  rgb_frame_rate = 15;
  // [Optional] Set the resolution of the color sensor.
  rgb_resolution = [1280, 720];

  // [Optional] Set the frame rate of the depth sensor as integer (check supported values, e.g. 0 [any], 6, 15, 30).
  depth_frame_rate = 15;
  // [Optional] Set the resolution of the depth sensor.
  depth_resolution = [1280, 720];
  

  // [Optional] Where to load/store the intrinsic calibration from/to.
  calibration_file = "calib-rs2.xml";

  // [Optional] If true, the sensor calibration will be stored to "calibration_file".
  write_calibration = true; // If set, the calibration_file will be overwritten

  // [Optional] Set to true to rectify streams (although they're usually not distorted).
  rectify = true;


  // [Optional] If configured, the following rs2_option values will be set upon startup of the color sensor.
  rgb_options = (
    ("RS2_OPTION_ENABLE_AUTO_EXPOSURE", 1), 
    ("RS2_OPTION_ENABLE_AUTO_WHITE_BALANCE", 0.0)
  );

  // [Optional] If configured, the following rs2_option values will be set upon startup of the depthsensor.
  depth_options = (
    ("RS2_OPTION_ENABLE_AUTO_EXPOSURE",1),
//    ("RS2_OPTION_GAMMA", 300), // This option would cause a warning/error message, because "gamma" is not supported for the depth sensor!
    ("RS2_OPTION_EMITTER_ENABLED", 1),
    ("RS2_OPTION_VISUAL_PRESET", 5) // Check rs_option.h, e.g. RS400 --> 2: Hand, 3: Accuracy, 4/5: High/Medium Density, etc.
  );


  /*
  // [Optional] If configured, the spatial (depth image) filter will be applied (using the given settings).
  spatial_filter_options = (
    ("RS2_OPTION_FILTER_MAGNITUDE", 2),
    ("RS2_OPTION_FILTER_SMOOTH_ALPHA", 0.5),
    ("RS2_OPTION_FILTER_SMOOTH_DELTA", 20)
  );

  // [Optional] If configured, the temporal (depth image) filter will be applied (using the given settings).
  temporal_filter_options = (
    ("RS2_OPTION_FILTER_SMOOTH_ALPHA", 0.4),
    ("RS2_OPTION_FILTER_SMOOTH_DELTA", 50)
  );*/

  // [Optional] Log verbosely or not
  verbose = true;

  // [Optional] Perform a basic image transformation/manipulation, see imutils.h:
  //transform = "rot90";
};

sink-zed = {
  // [Mandatory] Specify the device/sink type.
  camera_type = "zed";

  // [Optional] By default, we will open the first available ZED cam.
  // * set device=X to open /dev/videoX on Linux (or camera X on Windows)
  // OR
  // * set serial_number to open the ZED cam with the given serial number
  serial_number = 23696;
//  device = 0;
  
  
  // [Optional] Specify a custom label
  label = "LRS ZED";

  // [Optional] Do you want to work with RGB or BGR?
  color_as_bgr = false;

  // [Optional] Frame rate.
  fps = 15;

  // [Optional] Change image resolution: hd2k, hd1080 (or 1080p), hd720 (or 720p), vga
  resolution = "720p";

  // [Optional] Select streams: left, right, depth, left-right-depth
  streams = "left-depth";

  // [Optional] Upon starting the sensor, the calibration will be stored to "calibration_file".
  write_calibration = true;

  // [Optional] Where to load/store the camera's intrinsic/stereo calibration.
  calibration_file = "calib-zed.xml";

  // [Optional] Set to true to rectify streams.
  rectify = true;

  
  // [Optional] ZED depth mode, none/performance/quality/ultra
  depth_mode = "ultra";

  // [Optional] Return depth measurements in meters (true) or millimeters. 
  depth_in_meters = false;

  // [Optional] You can enable (default) or disable the depth stabilization (on homogeneously textured regions).
  depth_stabilization = true;

  // [Optional] Flip the image if the camera is mounted upside down.
  flip_image = false;

  // [Optional] You can disable the initial self calibration step for repeatability.
  disable_self_calibration = false;

  // [Optional] Enable (default) or disable ZED's image enhancement ("enhanced contrast technology").
  enable_image_enhancement = true;

  // [Optional] By default, ZED will use the most powerful NVIDIA GPU found (gpu_id = -1).
  // Set to 0-based index (0 to num_gpus-1) to select a specific GPU.
  gpu_id = -1;

  // [Optional] Sensing mode: standard, fill
  sensing_mode = "standard";

  // [Optional] Threshold to reject depth values based on their confidence, int in [1, 100].
  // 100 ==> report all depth measurements
  // 90  ==> discard lowest confidence values
  // 20  ==> keep only highest confidence measurements
  confidence_threshold = 100;

  // [Optional] Threshold to reject depth values based on their textureness confidence, int in [1, 100].
  // 100 ==> report all depth measurements
  textureness_threshold = 100;

  // [Optional] Basic image transformations 
//  transform = "depth2surfnorm, surfnorm2rgb";

  verbose = true;
};
